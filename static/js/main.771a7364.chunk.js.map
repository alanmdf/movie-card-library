{"version":3,"sources":["components/MovieForm.js","services/movieData.js","services/movieAPI.js","pages/NewMovie.js","components/Loading.js","components/MovieCard.js","pages/EditMovie.js","pages/MovieDetails.js","pages/MovieList.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","htmlFor","placeholder","id","type","className","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","Component","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","NewMovie","shouldRedirect","newMovie","movieData","nextId","length","prevState","to","data-testid","Loading","MovieCard","src","alt","EditMovie","status","fetchMovie","updatedMovie","map","movieAPI","a","match","params","movieObj","MovieDetails","loading","handleDelete","filter","MovieList","fetchMovies","moviesArray","key","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.771a7364.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          Título\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          Subtítulo\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          Imagem\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          Sinopse\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          Avaliação\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"movie-form-div\">\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.number,\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieForm;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie);\n    this.setState((prevState) => ({\n      shouldRedirect: !prevState.shouldRedirect,\n    }));\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    } return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n\n    return (\n      <div data-testid=\"movie-card\" className=\"movie-card-div\">\n        <img src={ movie.imagePath } alt=\"\" />\n        <p>{movie.title}</p>\n        <p>{ movie.subtitle }</p>\n        <p>{ movie.genre }</p>\n        <p className=\"storyline\">{movie.storyline}</p>\n        <p>{ movie.rating }</p>\n        <Link to={ `/movies/${movie.id}` } className=\"details-link\">VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    genre: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.number,\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: {},\n      status: 'loading',\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie);\n    this.setState((prevState) => ({ shouldRedirect: !prevState.shouldRedirect }));\n  }\n\n  async fetchMovie() {\n    const { match: { params: { id } } } = this.props;\n    const movieObj = await movieAPI.getMovie(id);\n    this.setState({\n      status: '',\n      movie: movieObj,\n    });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === 'loading') {\n      return (<Loading />);\n    } return (\n      <div data-testid=\"edit-movie\" className=\"movie-form-div\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.number,\n    }),\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    const { match: { params: { id } } } = this.props;\n    this.state = {\n      movie: {},\n      loading: true,\n      id,\n    };\n\n    this.handleDelete = this.handleDelete.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  handleDelete() {\n    const { id } = this.state;\n    movieAPI.deleteMovie(id);\n  }\n\n  async fetchMovie() {\n    const { id } = this.state;\n    const movieObj = await movieAPI.getMovie(id);\n    this.setState((prevState) => ({\n      loading: !prevState,\n      movie: movieObj,\n    }));\n  }\n\n  render() {\n    const { movie: {\n      id,\n      title,\n      storyline,\n      imagePath,\n      genre,\n      rating,\n      subtitle }, loading } = this.state;\n\n    if (loading) {\n      return (<Loading />);\n    } return (\n      <div data-testid=\"movie-details\" className=\"movie-details-div\">\n        <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n        <p>{ `Title: ${title}` }</p>\n        <p>{ `Subtitle: ${subtitle}` }</p>\n        <p>{ `Storyline: ${storyline}` }</p>\n        <p>{ `Genre: ${genre}` }</p>\n        <p>{ `Rating: ${rating}` }</p>\n        <div className=\"btns-div\">\n          <button type=\"button\"><Link to=\"/\">VOLTAR</Link></button>\n          <button type=\"button\"><Link to={ `/movies/${id}/edit` }>EDITAR</Link></button>\n          <button\n            type=\"button\"\n            onClick={ this.handleDelete }\n          >\n            <Link to=\"/\">DELETAR</Link>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.number,\n    }),\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Loading } from '../components';\n\nimport MovieCard from '../components/MovieCard';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  async fetchMovies() {\n    const moviesArray = await movieAPI.getMovies();\n    this.setState((prevState) => ({\n      loading: !prevState,\n      movies: moviesArray,\n    }));\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n\n    if (loading) {\n      return (<Loading />);\n    } return (\n      <div data-testid=\"movie-list\" className=\"movie-list-div\">\n        {movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { HashRouter, Route, Switch, Link } from 'react-router-dom';\n\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport MovieDetails from './pages/MovieDetails';\nimport MovieList from './pages/MovieList';\nimport NotFound from './pages/NotFound';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"app-header\">Movie Card Library CRUD</div>\n      <Switch>\n        <Route exact path=\"/movies/new\" component={ NewMovie } />\n        <Route exact path=\"/movies/:id/edit\" component={ EditMovie } />\n        <Route exact path=\"/movies/:id\" component={ MovieDetails } />\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route path=\"*\" component={ NotFound } />\n      </Switch>\n      <br />\n      <Link to=\"/movies/new\" className=\"add-movie\">ADICIONAR CARTÃO</Link>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}